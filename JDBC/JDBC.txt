JDBC O QUE É?
JDBC FUNCIONA COMO UMA INTERFACE ENTRE UMA APLICAÇÃO DESENVOLVIDA EM JAVA E UM BANCO DE DADOS RELACIONAL.


ELE SÓ PERMITE INTERAÇÕES COM BD RELACIONAL(SQL) -  CONEXÕES COM BD;

ARQUITETURA DO JDBC
- API JDBC - FORNECE AS CLASSES E INTERFACE - ELE É INDEPENDENTE ENQUANTO AO SGBD;
- DRIVER JDBC - SÃO DRIVER QUE VAI CONTER IMPLEMENTAÇÕES ESPECIFICA PARA CADA BD;
- BD(RELACIONAL) - RESPONSAVEL POR ARMAZENAS INFORMAÇÕES E FAZER CONSULTAS;

TRATAMENTO DE EXCEÇÕES:
O TRATAMENTO DE EXCEÇÕES É UM CONCEITO DA PROGRAMAÇÃO QUE TEM COMO IDEIA A MANEIRA DE COMO UM 
PROGRAMA LIDA COM ERROS OU SITUAÇÕES EXCEPCIONAIS QUE PODEM OCORRER DURANTE A EXECUÇÃO.

TRATAMENTO DE EXCEÇÕES SERIA A IDEIA DE ESCREVER UM CÓDIGO PARA LIDAR COM ESSAS SITUAÇÕES DE FORMA APROPRIADA.

LANÇAMENTO DE EXCEÇÕES: É UM PROCESSO QUE SINALIZA QUE OCORREU UM ERRO OU UMA SITUAÇÃO EXCEPCIONAL DURANTE A EXECUÇÃO.
LANÇAMENTO DE EXCEÇÕES: PALAVRA - CHAVE "throw"

CAPTURA DE EXCEÇÕES:LIDA COM UMA EXCEÇÃO POR MEIO DE BLOCOS, TRY-CATCH, TRY = EXCEÇÃO QUE OCORRE DENTRO DO BLOCO, CATCH - LIDA COM O TIPO ESPECIFICO DE EXCEÇÃO.

FINALIZAÇÃO DE RECURSOS: FINALLY, ELE É EXECUTADO INDEPENDENTE SE O CODIGO RODOU CORRETAMENTE OU NÃO.

STATEMENT X PREPAREDSTATEMENT

STATEMENT :
É USADO PARA EXECUTAR CONSULTAS SQL DIRETAMENTE NO BANCO DE DADOS - É VUNERAVEL A ATAQUES SQL INJECTION, POR ISSO NÃO É MAIS USADO.

PREPAREDSTATEMENT:
É USADO PAR EXECUTAR CONSULTAS SQL PRÉ-COMPILADAS, AS CONSULTAS SÃO CRIADAS COM ESPAÇOS RESERVADO PARA PARÂMETROS, OS VALORES DOS PARAMETROS SÃO DEFINIDOS ANTES DA EXECUÇÃO.
É MAIS SEGURO E MAIS ESTAVEL COMPARARADO AO STATEMENT

DESIGN PATTERNS(PADRÕES DE PROJETO):SÃO SOLUÇÕES PADRONIZADA PARA RESOLVER PROBLEMAS ESPECIFICOS;

OBS: DESIGN PATTERNS TEM O FINALIDADE DE FACILITAR A COMPREENSÃO E A COMUNIÇÃO ENTRE DESENVOLVEDORES;

DESIGN PATTERS FUNCIONA COMO MODELOS PARA RESOLUÇÃO DE PROBLEMAS E PODEM SER ADAPTADOS E PERSONALIZADOS PARA SE ENCAIXAR EM CADA SITUAÇÃO ESPECÍFICAS.

A UTILIZAÇÃO DO DESIGN PATTERS VAI PROPOCIONAR AO PROGRAMADOR A REUTILIZAÇÕES DE SOLUÇÕES.

CATEGORIAS DO DESIGN PATTERS:
- PADRÕES DE CRIAÇÃO - ESSE PADRÃO É RELACIONADO A CRIAÇÃO DE OBJETOS;
- PADRÕES ESTRUTURAIS - ESSE PADRÃO É RELACIONADO A COMPOSIÇÃO DE CLASSES E OBJETS PARA FORMAR ESTRUTURAS MAIORES;
- PADRÕES COMPORTAMENTAIS - ESSE PADRÃO É RELACIONADO A INTERAÇÕES E RESPONSABILIDADES ENTRE OBJETOS. TEM UMA IDEIA DE CONCETRAR NA MANEIRA COMO OS OBJETOS SE COMUNICAM.


PADRÃO DAO:
PADRÃO DÃO É UM PADRÃO DE PROJETOS ONDE UM OBJETO PROVÊ UMA INTERFACE QUE ABSTRAI O ACESSO A DADOS E ENCAPSULA O ACESSO AOS DADOS, DE FORMA QUE AS DEMAIS CLASSES NÃO PRECISAM SABER SOBRE ISSO.

ARQUITETURA DAO:
OS DAOS FICAM JUNTO COM O MODEL FAZENDO UM TRABALHO DE SUPORTE INTREGANDO OS DADOS AO OBJETOS DO SISTEMA.

RESPONSABILIDADES DO DAO:
AS RESPONSABILIDADE DO DAO É SER RESPONSAVEL POR ACESSO AOS DADOS. OU SEJA, ELE DEVE SER USADO PRA LEITURA OU GRAVAÇÃO NO BANCO DE DADOS.

UTILIZAÇÃO DE INTERFACE NO DAO:
INTERFACE TEM COMO FINALIDADE GARANTIR QUE OS METODOS E ATRIBUTOS SEJAM IMPLEMENTADOS QUANDO NECESSÁRIO, ISSO GARANTE QUE AS CLASSES TENHA COMPORTAMENTOS EM COMUM, MESMO TENDO CARACTERISTICAS ESPECIFICAS

OBS: AS INTERFACES SÃO AMPLAMENTE USADAS EM PADRÕES DE PROJETO POR CAUSA DA CAPACIDADE DE GARANTIR QUE OS METODOS NECESSARIOS SEJAM IMPLEMENTADAS.

CONNECTION É UMA INTERFACE  EM JAVA QUE VOCÊ UTILIZA PRA FAZER CONEXÃO COM O BD A PARTIR DE UM PROJETO JAVA.

ESSA INTERFACE ELA FAZ PARTE DO PACOTE JAVA.SQL;

DRIVERMANAGER.GETCONNECTION() É UM MÉTODO FORNECIDO POR UM OBJETO DRIVERMANAGER QUE É RESPONSÁVEL PELOS PARÂMETROS NECESSÁRIOS PARA A CONEXÃO COM O BANCO DE DADOS.

QUANDO MEU METODO POSSUI THROWS SQLEXCEPTION EU ESTOU QUERENDO DIZER PRO MEU COMPILADOR QUE OS TRATAMENTOS DE EXCEÇÕES SERÃO VOLTADOS AO SQL.

SQLEXCEPTION E - É UMA ESPECIFICAÇÃO COM E O CATCH RECEBE COMO PARAMETRO PARA INDICAR QUE ERRO QUE PODE SUGIR NA OPERAÇÃO COM O BANCO DE DADOS SQL.

RESULTSET É UMA CLASSE QUE VOCÊ CONSEGUE MANIPULAR DADOS DO BANCO DE DADOS SQL.

.CLOSE() = VAI GARANTIR QUE APÓS A COMPILAÇÃO DO CÓDIGO, A MEMORIA SEJA LIBERADA;

PADRÃO DE PROJETO MVC:
MVC(M - MODEL; V - VIEW; C - CONTROLLER)
MODEL - TEM COMO FINALIDADE GERENCIAR AS INFORMAÇÕES DOS DADOS;
VIEW  - APRESENTA ESSES DADOS PARA O USUARIO(TELAS)
CONTROLLER - GERENCIA O MODEL E A VIEW, FAZENDO O FLUXO DE DADOS E TROCA DE INFORMAÇÃO QUANDO NECESSARIO;

IMPLEMENTAÇÃO DO PADRÃO MVC GARANTE O FLUXO DE DADOS, PERMITINDO QUE CADA COMPONENTE TENHA UMA RESPONSABILIDADE PROPRIA OU SEJA, ELE GARANTE A SEPARAÇÃO DAS RESPONSABILIDADES, FACILITANDO A MANUTENÇÃO E REUTILIZAÇÃO DAQUELE COMPONENTES;

UTILS(UTILITARIOS) - SÃO CLASSES QUE POSSUEM METODOS E FUNCIONALIDADES GENÉRICAS QUE PODEM SER ÚTEIS PARA MODULARIZAR E FACILITAR A MANUTENÇÃO DO CÓDIGO NO PROJETO MVC
