POO - PROGRAMAÇÃO ORIENTADA A OBJETOS:

4 PILARES DA POO (ABSTRAÇÃO,ENCAPSULAMENTO,HERENÇA E POLIMORFISMO);

OBJETO ESTÁ RELACIONADO COM O ESTADO, COMPORTAMENTO E CARACTERISTICAS
ESTADO É AS CARACTERISTICAS ATUAIS DESSE OBJETO - CONDIÇÃO EM QUE O OBJETO SE ENCONTRA
COMPORTAMENTO SERIA A AÇÃO DESSE OBJETO(METODOS)
CARACTERISTICAS É OS ATRIBUTOS DEFINIDOS PELA CLASSE

OBJETO NÃO PRECISA SER ALGO MATERIAL, ELE PODE SER ABSTRATO TAMBEM, CONTANTO QUE ELE SEJA UMA ISTÂNCIA DE UMA CLASSE.

CLASSE:
A CLASSE DEFINE QUAIS ATRIBUTOS E MÉTODOS O OBJETO VAI TER.

OBS: PRA O OBJETO SER CRIADO, EU PRECISO PRIMEIRO TER A CLASSE DEFINIDA PARA APÓS EU CRIAR A INSTÂNCIA PRA ESSE OBJETO.

INSTÂNCIA É QUANDO UMA CLASSE CONSEGUE GERAR UM OBJETO A PARTIR DO QUE FOI DENIFIDO DENTRO DA CLASSE

ABSTRAÇÃO:
SERIA A IDÉIA DE ABSTRAIR O ESTADO(CARACTERISTICAS ATUAIS) DE UM DETERMINADO OBJETO 

O THIS É USADO QUANDO EU QUERO ESPECIFICAR A UTILIZAÇÃO DE UMA PROPRIEDADE DE UM OBJETO DENTRO DA FUNÇÃO

OBS: CONSTRUTOR É UMA FUNÇÃO QUE VAI RECEBER DENTRO DE SUA ESTRUTURA PROPRIEDADES ATRAVÉS DO THIS QUE VÃO CARACTERIZAR MINHA CLASSE CRIANDO UM PADRÃO.

UML(LINGUAGEM DE MODELAGEM UNIFICADA) : USADO PARA ELABORAR ESTRUTURA DE PROJETOS DE SOFTWARE.
EM POO O QUE VAMOS UTILIZAR É O DIAGRAMA DE CLASSES QUE INCLUI COMO CLASSE ATRIBUTOS, METODOS E RELACIONAMENTOS.

OS RELACIONAMENTOS ESTÁ RELACIONADO COM UMA CLASSE SE RELACIONANDO COM OUTRA CLASSE

ESSE RELACIONAMENTO É DEFINIDO PELAS CARDINALIDADES

VISIBILIDADE DE UM OBJETO:
+ = PUBLICO(PUBLIC)
- = PRIVADO(PRIVATE)
# = PROTEGIDO(PROTECTED)

OBS: VISIBILIDADE ESTÁ RELACIONADO COM O ESCOPO, O  PUBLICO EU CONSIGO MODIFICAR E ACESSAR DE QUALQUER LUGAR(ESCOPO GLOBAL), SEJA FORA OU DENTRO DO BLOCO, PRIVADO SÓ É POSSIVEL MODIFICAR ATRAVÉS DO METODO GET E SET E O PROTEGIDO SÓ POSSO MODIFICAR E ACESSAR DENTRO DAQUELE ESCOPO OU SEJA DENTRO DAQUELE BLOCO(ESCOPO DE BLOCO);

OBS: QUANDO EU NÃO DEFINO NENHUMA VISIBILIDADE ELE AUTOMATICAMENTE É DENOMINADO COMO PUBLICO.

METODOS ACESORES : METODO GETTERS PERMITE ACESSAR ALGO DENTRO DO MEU OBJETO SEJA ELE ATRIBUTO OU METODO 
METODOS MODIFICADORES : SETTERS PERMITE MODIFICAR UM ATRIBUTO OU METODO

OBS:OS METODOS SETTER SÃO MAIS ABSTRATOS QUE OS METODOS GETTERS QUE ACABA SENDO MAIS DESCRITIVOS

OBS: NO CASO O CONSTRUTOR ELE TEM A IDEIA DE TER CARACTERISTICAS PRÉ DEFINIDAS QUE VÃO SER CARACTERISTICAS PADRÕES DA MINHA CLASSE QUE PODE SER MODIFICADA PELOS SETTERS SE NECESSARIO

OBS: OS SETTER VAI SER USADO PARA PERMITIR ALTERAÇÕES DENTRO DA CLASSE(ATRIBUTOS OU METODOS) INDEPEDENTE DA SUA VISIBILIDADE.

OBS: CADA INSTÂNCIA É UMA ENTIDADE SEPARADA INDEPEDENTE SE SEUS ATRIBUTOS SÃO IGUAIS.

ENCAPSULAMENTO: SERIA A IDEIA DE AGRUPAR DADOS COM METODOS QUE AGRUPAM ESSES DADOS.
OBS: A IDEIA DO ENCAPSULAMENTO É DEIXAR O CÓDIGO FLEXIVEL;

HERENÇA: SERIA A IDEIA DE UMA CLASSE(SUBCLASSE) HERDE CARACTERISTICAS DE UMA CLASSE PAI(SUPERCLASSE) , E A SUBCLASSE TERÁ CARACTERISTICAS PROPRIAS;

POLIMORFISMO: SERIA A IDEIA DE QUE OS OBJETOS SÃO TRATADOS DE MANEIRAS UNIFORME, OU SEJA QUE ELE PODE SER REFERECIADO EM QUALQUER METODO, PERMITINDO O REUSO;

CLASSE ABSTRATA: A CLASSE ABSTRATA É QUANDO VOCÊ TEM UMA CLASSE COM CARACTERISTICAS ABSTRATAS OU ALGUMAS CARACTERISTICAS ABSTRATAS QUE NÃO VÃO PODER SER INSTACIADAS, POREM ELA PODE SER REFERENCIADA PARA OUTRAS CLASSES;

INTERFACE : INTERFACE SÃO  APENAS AS ASSINATURAS DOS MÉTODOS, SEM A IMPLEMENTAÇÃO REAL DESSES MÉTODOS. EM OUTRAS PALAVRAS, UMA INTERFACE ESPECIFICA O QUE UMA CLASSE DEVE FAZER, MAS NÃO COMO ELA DEVE FAZER.
